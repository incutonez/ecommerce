/* tslint:disable */
/* eslint-disable */
/**
 * API
 * The main API for all Sandbox apps
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CartCheckoutResponseModel } from '../models';
// @ts-ignore
import { CartItemAddEntity } from '../models';
// @ts-ignore
import { CartItemUpdateEntity } from '../models';
// @ts-ignore
import { CartResponseModel } from '../models';
/**
 * CartItemsApi - axios parameter creator
 * @export
 */
export const CartItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CartItemAddEntity} cartItemAddEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add: async (cartItemAddEntity: CartItemAddEntity, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartItemAddEntity' is not null or undefined
            assertParamExists('add', 'cartItemAddEntity', cartItemAddEntity)
            const localVarPath = `/cart-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cartItemAddEntity, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cart-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartCheckout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cart-items/checkout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove: async (itemId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('remove', 'itemId', itemId)
            const localVarPath = `/cart-items/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} itemId 
         * @param {CartItemUpdateEntity} cartItemUpdateEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCount: async (itemId: string, cartItemUpdateEntity: CartItemUpdateEntity, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('updateCount', 'itemId', itemId)
            // verify required parameter 'cartItemUpdateEntity' is not null or undefined
            assertParamExists('updateCount', 'cartItemUpdateEntity', cartItemUpdateEntity)
            const localVarPath = `/cart-items/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cartItemUpdateEntity, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartItemsApi - functional programming interface
 * @export
 */
export const CartItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CartItemAddEntity} cartItemAddEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async add(cartItemAddEntity: CartItemAddEntity, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.add(cartItemAddEntity, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCart(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCart(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCartCheckout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartCheckoutResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCartCheckout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove(itemId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remove(itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} itemId 
         * @param {CartItemUpdateEntity} cartItemUpdateEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCount(itemId: string, cartItemUpdateEntity: CartItemUpdateEntity, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCount(itemId, cartItemUpdateEntity, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartItemsApi - factory interface
 * @export
 */
export const CartItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartItemsApiFp(configuration)
    return {
        /**
         * 
         * @param {CartItemAddEntity} cartItemAddEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add(cartItemAddEntity: CartItemAddEntity, options?: any): AxiosPromise<void> {
            return localVarFp.add(cartItemAddEntity, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart(options?: any): AxiosPromise<CartResponseModel> {
            return localVarFp.getCart(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartCheckout(options?: any): AxiosPromise<CartCheckoutResponseModel> {
            return localVarFp.getCartCheckout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove(itemId: string, options?: any): AxiosPromise<void> {
            return localVarFp.remove(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} itemId 
         * @param {CartItemUpdateEntity} cartItemUpdateEntity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCount(itemId: string, cartItemUpdateEntity: CartItemUpdateEntity, options?: any): AxiosPromise<void> {
            return localVarFp.updateCount(itemId, cartItemUpdateEntity, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartItemsApi - interface
 * @export
 * @interface CartItemsApi
 */
export interface CartItemsApiInterface {
    /**
     * 
     * @param {CartItemAddEntity} cartItemAddEntity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartItemsApiInterface
     */
    add(cartItemAddEntity: CartItemAddEntity, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartItemsApiInterface
     */
    getCart(options?: AxiosRequestConfig): AxiosPromise<CartResponseModel>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartItemsApiInterface
     */
    getCartCheckout(options?: AxiosRequestConfig): AxiosPromise<CartCheckoutResponseModel>;

    /**
     * 
     * @param {string} itemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartItemsApiInterface
     */
    remove(itemId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} itemId 
     * @param {CartItemUpdateEntity} cartItemUpdateEntity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartItemsApiInterface
     */
    updateCount(itemId: string, cartItemUpdateEntity: CartItemUpdateEntity, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * CartItemsApi - object-oriented interface
 * @export
 * @class CartItemsApi
 * @extends {BaseAPI}
 */
export class CartItemsApi extends BaseAPI implements CartItemsApiInterface {
    /**
     * 
     * @param {CartItemAddEntity} cartItemAddEntity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartItemsApi
     */
    public add(cartItemAddEntity: CartItemAddEntity, options?: AxiosRequestConfig) {
        return CartItemsApiFp(this.configuration).add(cartItemAddEntity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartItemsApi
     */
    public getCart(options?: AxiosRequestConfig) {
        return CartItemsApiFp(this.configuration).getCart(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartItemsApi
     */
    public getCartCheckout(options?: AxiosRequestConfig) {
        return CartItemsApiFp(this.configuration).getCartCheckout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} itemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartItemsApi
     */
    public remove(itemId: string, options?: AxiosRequestConfig) {
        return CartItemsApiFp(this.configuration).remove(itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} itemId 
     * @param {CartItemUpdateEntity} cartItemUpdateEntity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartItemsApi
     */
    public updateCount(itemId: string, cartItemUpdateEntity: CartItemUpdateEntity, options?: AxiosRequestConfig) {
        return CartItemsApiFp(this.configuration).updateCount(itemId, cartItemUpdateEntity, options).then((request) => request(this.axios, this.basePath));
    }
}
